# Universal MCP System - Production Deployment Configuration

version: '3.8'

services:
  # Enhanced MCP Backend Service
  mcp-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: luna-mcp-backend
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@mcp-postgres:5432/luna_mcp
      - REDIS_URL=redis://mcp-redis:6379/0
      
      # AI Service Configuration
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=gemini-2.5-flash
      - GEMINI_TEMPERATURE=0.7
      - GEMINI_MAX_TOKENS=8192
      
      # LangChain Configuration
      - LANGCHAIN_CHAIN_TYPE=conversational
      - LANGCHAIN_MEMORY_TYPE=conversation_buffer
      - LANGCHAIN_MAX_MEMORY=20
      
      # NVIDIA Riva Configuration
      - RIVA_SERVER_URL=mcp-riva:50051
      - RIVA_LANGUAGE=en-US
      - RIVA_VOICE=English-US.Female-1
      - RIVA_SAMPLE_RATE=22050
      
      # Security Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_HOURS=24
      
      # MCP Service Configuration
      - MCP_MAX_CONCURRENT_REQUESTS=100
      - MCP_REQUEST_TIMEOUT=300
      - MCP_ENABLE_VOICE=true
      - MCP_ENABLE_MULTIMODAL=true
      
      # Monitoring Configuration
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=8080
      - LOG_LEVEL=INFO
      
    ports:
      - "8000:8000"
      - "8080:8080"  # Prometheus metrics
    depends_on:
      - mcp-postgres
      - mcp-redis
      - mcp-riva
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/mcp/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # Enhanced Frontend Service
  mcp-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: luna-mcp-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_VOICE_ENABLED=true
      - REACT_APP_ANALYTICS_ENABLED=true
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - mcp-backend
    restart: unless-stopped
    networks:
      - mcp-network

  # PostgreSQL Database with Enhanced Configuration
  mcp-postgres:
    image: postgres:15-alpine
    container_name: luna-mcp-postgres
    environment:
      - POSTGRES_DB=luna_mcp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5432:5432"
    volumes:
      - mcp_postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d luna_mcp"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # Redis Cache and Queue
  mcp-redis:
    image: redis:7-alpine
    container_name: luna-mcp-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - mcp_redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # NVIDIA Riva TTS/ASR Service
  mcp-riva:
    image: nvcr.io/nvidia/riva/riva-speech:2.14.0
    container_name: luna-mcp-riva
    environment:
      - RIVA_API_KEY=${RIVA_API_KEY}
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "50051:50051"
    volumes:
      - mcp_riva_data:/data
      - mcp_riva_models:/models
    restart: unless-stopped
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - mcp-network

  # Celery Task Queue Workers
  mcp-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: luna-mcp-worker
    command: celery -A app.worker worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@mcp-postgres:5432/luna_mcp
      - REDIS_URL=redis://mcp-redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - RIVA_SERVER_URL=mcp-riva:50051
    depends_on:
      - mcp-postgres
      - mcp-redis
      - mcp-riva
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    networks:
      - mcp-network

  # Celery Beat Scheduler
  mcp-scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: luna-mcp-scheduler
    command: celery -A app.worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@mcp-postgres:5432/luna_mcp
      - REDIS_URL=redis://mcp-redis:6379/0
    depends_on:
      - mcp-postgres
      - mcp-redis
    volumes:
      - ./backend/logs:/app/logs
    restart: unless-stopped
    networks:
      - mcp-network

  # NGINX Load Balancer and Reverse Proxy
  mcp-nginx:
    image: nginx:alpine
    container_name: luna-mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - mcp-backend
      - mcp-frontend
    restart: unless-stopped
    networks:
      - mcp-network

  # Prometheus Monitoring
  mcp-prometheus:
    image: prom/prometheus:latest
    container_name: luna-mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - mcp_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network

  # Grafana Dashboard
  mcp-grafana:
    image: grafana/grafana:latest
    container_name: luna-mcp-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
    volumes:
      - mcp_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - mcp-prometheus
    restart: unless-stopped
    networks:
      - mcp-network

  # Vector Database for Embeddings (ChromaDB)
  mcp-chromadb:
    image: chromadb/chroma:latest
    container_name: luna-mcp-chromadb
    ports:
      - "8001:8000"
    volumes:
      - mcp_chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    restart: unless-stopped
    networks:
      - mcp-network

# Persistent Volume Definitions
volumes:
  mcp_postgres_data:
    driver: local
  mcp_redis_data:
    driver: local
  mcp_riva_data:
    driver: local
  mcp_riva_models:
    driver: local
  mcp_prometheus_data:
    driver: local
  mcp_grafana_data:
    driver: local
  mcp_chroma_data:
    driver: local

# Network Configuration
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
